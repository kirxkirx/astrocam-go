name: Release

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0, v2.1.3, etc.

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Required to create releases and upload assets

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Get version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Build Linux binary
        run: |
          go build -ldflags="-s -w -X main.version=${{ steps.version.outputs.version }}" -o astrocam-linux-amd64 astrocam.go
          chmod +x astrocam-linux-amd64

      - name: Build Windows 64-bit binary
        run: |
          GOOS=windows GOARCH=amd64 go build -ldflags="-s -w -X main.version=${{ steps.version.outputs.version }}" -o astrocam-windows-amd64.exe astrocam.go

      - name: Build Windows 32-bit binary
        run: |
          GOOS=windows GOARCH=386 go build -ldflags="-s -w -X main.version=${{ steps.version.outputs.version }}" -o astrocam-windows-386.exe astrocam.go

      - name: Create checksums
        run: |
          sha256sum astrocam-linux-amd64 > checksums.txt
          sha256sum astrocam-windows-amd64.exe >> checksums.txt
          sha256sum astrocam-windows-386.exe >> checksums.txt
          echo "Generated checksums:"
          cat checksums.txt

      - name: Create release archive
        run: |
          # Create a release package with all necessary files
          mkdir -p astrocam-${{ steps.version.outputs.version }}
          
          # Copy binaries
          cp astrocam-linux-amd64 astrocam-${{ steps.version.outputs.version }}/
          cp astrocam-windows-amd64.exe astrocam-${{ steps.version.outputs.version }}/
          cp astrocam-windows-386.exe astrocam-${{ steps.version.outputs.version }}/
          
          # Copy configuration and documentation
          cp config.env.example astrocam-${{ steps.version.outputs.version }}/
          cp areas.txt astrocam-${{ steps.version.outputs.version }}/
          cp README.md astrocam-${{ steps.version.outputs.version }}/
          cp checksums.txt astrocam-${{ steps.version.outputs.version }}/
          
          # Create installation scripts
          cat > astrocam-${{ steps.version.outputs.version }}/install-linux.sh << 'EOF'
          #!/bin/bash
          echo "Installing AstroCam for Linux..."
          sudo mkdir -p /opt/astrocam
          sudo cp astrocam-linux-amd64 /opt/astrocam/astrocam
          sudo cp config.env.example /opt/astrocam/config.env
          sudo cp areas.txt /opt/astrocam/
          sudo chmod +x /opt/astrocam/astrocam
          echo "✓ AstroCam installed to /opt/astrocam/"
          echo "Edit /opt/astrocam/config.env with your settings"
          echo "Run: cd /opt/astrocam && ./astrocam"
          EOF
          
          cat > astrocam-${{ steps.version.outputs.version }}/install-windows.bat << 'EOF'
          @echo off
          echo Installing AstroCam for Windows...
          if not exist "C:\AstroCam" mkdir "C:\AstroCam"
          copy astrocam-windows-amd64.exe "C:\AstroCam\astrocam.exe"
          copy config.env.example "C:\AstroCam\config.env"
          copy areas.txt "C:\AstroCam\"
          echo.
          echo ✓ AstroCam installed to C:\AstroCam\
          echo Edit C:\AstroCam\config.env with your settings
          echo Run from: cd C:\AstroCam && astrocam.exe
          pause
          EOF
          
          chmod +x astrocam-${{ steps.version.outputs.version }}/install-linux.sh
          
          # Create complete release archive
          tar -czf astrocam-${{ steps.version.outputs.version }}-complete.tar.gz astrocam-${{ steps.version.outputs.version }}/
          zip -r astrocam-${{ steps.version.outputs.version }}-complete.zip astrocam-${{ steps.version.outputs.version }}/

      - name: Generate release notes
        id: release_notes
        run: |
          cat > release_notes.md << EOF
          # AstroCam ${{ steps.version.outputs.version }}
          
          ## Download Options
          
          ### Individual Binaries
          - **Linux (64-bit)**: \`astrocam-linux-amd64\`
          - **Windows (64-bit)**: \`astrocam-windows-amd64.exe\` (recommended for modern Windows)
          - **Windows (32-bit)**: \`astrocam-windows-386.exe\` (for legacy Windows systems)
          
          ### Complete Packages
          - **All platforms**: \`astrocam-${{ steps.version.outputs.version }}-complete.tar.gz\` or \`astrocam-${{ steps.version.outputs.version }}-complete.zip\`
          - Includes all binaries, configuration templates, and installation scripts
          
          ## Quick Start
          
          ### Linux Installation
          \`\`\`bash
          # Download and extract
          wget https://github.com/\${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/astrocam-linux-amd64
          chmod +x astrocam-linux-amd64
          
          # Or use the complete package with installer
          tar -xzf astrocam-${{ steps.version.outputs.version }}-complete.tar.gz
          cd astrocam-${{ steps.version.outputs.version }}
          ./install-linux.sh
          \`\`\`
          
          ### Windows Installation
          1. Download \`astrocam-windows-amd64.exe\` (or complete package)
          2. Run \`install-windows.bat\` (if using complete package)
          3. Edit \`config.env\` with your settings
          4. Run \`astrocam.exe\`
          
          ## Configuration
          1. Copy \`config.env.example\` to \`config.env\`
          2. Edit with your server details and directories
          3. Ensure \`areas.txt\` contains your area codes
          
          ## Archive Formats
          - **RAR**: Used if \`rar\` command available (better compression)
          - **ZIP**: Built-in fallback (no external dependencies)
          
          ## Verification
          Use the provided \`checksums.txt\` to verify download integrity:
          \`\`\`bash
          sha256sum -c checksums.txt
          \`\`\`
          
          ---
          
          **Full documentation**: See README.md in the complete package or [repository](https://github.com/${{ github.repository }})
          EOF
          
          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          cat release_notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          release_name: AstroCam ${{ steps.version.outputs.version }}
          body: ${{ steps.release_notes.outputs.release_notes }}
          draft: false
          prerelease: false

      - name: Upload Linux binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./astrocam-linux-amd64
          asset_name: astrocam-linux-amd64
          asset_content_type: application/octet-stream

      - name: Upload Windows 64-bit binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./astrocam-windows-amd64.exe
          asset_name: astrocam-windows-amd64.exe
          asset_content_type: application/octet-stream

      - name: Upload Windows 32-bit binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./astrocam-windows-386.exe
          asset_name: astrocam-windows-386.exe
          asset_content_type: application/octet-stream

      - name: Upload checksums
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./checksums.txt
          asset_name: checksums.txt
          asset_content_type: text/plain

      - name: Upload complete package (tar.gz)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./astrocam-${{ steps.version.outputs.version }}-complete.tar.gz
          asset_name: astrocam-${{ steps.version.outputs.version }}-complete.tar.gz
          asset_content_type: application/gzip

      - name: Upload complete package (zip)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./astrocam-${{ steps.version.outputs.version }}-complete.zip
          asset_name: astrocam-${{ steps.version.outputs.version }}-complete.zip
          asset_content_type: application/zip
