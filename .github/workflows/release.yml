name: Release

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0, v2.1.3, etc.

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Required to create releases and upload assets

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Get version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Build Linux binary
        run: |
          go build -ldflags="-s -w -X main.version=${{ steps.version.outputs.version }}" -o astrocam-linux-amd64 astrocam.go
          chmod +x astrocam-linux-amd64

      - name: Build Windows 64-bit binary
        run: |
          GOOS=windows GOARCH=amd64 go build -ldflags="-s -w -X main.version=${{ steps.version.outputs.version }}" -o astrocam-windows-amd64.exe astrocam.go

      - name: Build Windows 32-bit binary
        run: |
          GOOS=windows GOARCH=386 go build -ldflags="-s -w -X main.version=${{ steps.version.outputs.version }}" -o astrocam-windows-386.exe astrocam.go

      - name: Create checksums
        run: |
          sha256sum astrocam-linux-amd64 > checksums.txt
          sha256sum astrocam-windows-amd64.exe >> checksums.txt
          sha256sum astrocam-windows-386.exe >> checksums.txt
          echo "Generated checksums:"
          cat checksums.txt

      - name: Create release archive
        run: |
          # Create a release package with all necessary files
          mkdir -p astrocam-${{ steps.version.outputs.version }}
          
          # Copy binaries
          cp astrocam-linux-amd64 astrocam-${{ steps.version.outputs.version }}/
          cp astrocam-windows-amd64.exe astrocam-${{ steps.version.outputs.version }}/
          cp astrocam-windows-386.exe astrocam-${{ steps.version.outputs.version }}/
          
          # Copy configuration and documentation
          cp config.env.example astrocam-${{ steps.version.outputs.version }}/
          cp areas.txt astrocam-${{ steps.version.outputs.version }}/
          cp README.md astrocam-${{ steps.version.outputs.version }}/
          cp checksums.txt astrocam-${{ steps.version.outputs.version }}/
          
          # Create installation scripts
          cat > astrocam-${{ steps.version.outputs.version }}/install-linux.sh << 'EOF'
          #!/bin/bash
          echo "Installing AstroCam for Linux..."
          
          # Create installation directory
          sudo mkdir -p /opt/astrocam
          echo "✓ Created /opt/astrocam directory"
          
          # Copy files with verbose output
          echo "Copying executable..."
          sudo cp -v astrocam-linux-amd64 /opt/astrocam/astrocam
          sudo chmod +x /opt/astrocam/astrocam
          
          echo "Copying configuration files..."
          sudo cp -v config.env.example /opt/astrocam/config.env
          sudo cp -v areas.txt /opt/astrocam/
          sudo cp -v README.md /opt/astrocam/ 2>/dev/null || echo "README.md not found, skipping"
          
          echo ""
          echo "========================================="
          echo "✓ AstroCam installed successfully!"
          echo "========================================="
          echo "Installation location: /opt/astrocam/"
          echo ""
          echo "Next steps:"
          echo "1. Edit configuration: sudo nano /opt/astrocam/config.env"
          echo "2. Edit sky areas: sudo nano /opt/astrocam/areas.txt"
          echo "3. Test installation: cd /opt/astrocam && sudo ./astrocam -test"
          echo "4. Run normally: cd /opt/astrocam && sudo ./astrocam"
          echo ""
          echo "Config files are automatically found next to the executable!"
          echo "No need to copy config files to working directory."
          EOF
          
          cat > astrocam-${{ steps.version.outputs.version }}/install-windows.bat << 'EOF'
          @echo off
          echo Installing AstroCam for Windows...
          echo.
          
          REM Create installation directory
          if not exist "C:\AstroCam" (
              mkdir "C:\AstroCam"
              echo Created C:\AstroCam directory
          )
          
          REM Copy files
          echo Copying files...
          copy /v astrocam-windows-amd64.exe "C:\AstroCam\astrocam.exe"
          copy /v config.env.example "C:\AstroCam\config.env"
          copy /v areas.txt "C:\AstroCam\"
          copy /v README.md "C:\AstroCam\" 2>nul
          
          echo.
          echo =========================================
          echo ^✓ AstroCam installed successfully!
          echo =========================================
          echo Installation location: C:\AstroCam\
          echo.
          echo Next steps:
          echo 1. Edit configuration: notepad C:\AstroCam\config.env
          echo 2. Edit sky areas: notepad C:\AstroCam\areas.txt
          echo 3. Test installation: cd C:\AstroCam ^&^& astrocam.exe -test
          echo 4. Run normally: cd C:\AstroCam ^&^& astrocam.exe
          echo.
          echo Config files are automatically found next to the executable!
          echo No need to copy config files to working directory.
          echo.
          pause
          EOF
          
          chmod +x astrocam-${{ steps.version.outputs.version }}/install-linux.sh
          
          # Create complete release archive
          tar -czf astrocam-${{ steps.version.outputs.version }}-complete.tar.gz astrocam-${{ steps.version.outputs.version }}/
          zip -r astrocam-${{ steps.version.outputs.version }}-complete.zip astrocam-${{ steps.version.outputs.version }}/

      - name: Generate release notes
        id: release_notes
        run: |
          cat > release_notes.md << EOF
          # AstroCam ${{ steps.version.outputs.version }}
          
          ## 🚀 Key Features
          
          ### ✅ **Intelligent Configuration Management**
          - **Smart Config Lookup**: Automatically finds config files next to executable, then falls back to current directory
          - **Flexible Deployment**: No need to copy config files to working directory
          - **Cross-Platform Paths**: Handles Windows/Linux path differences automatically
          
          ### ✅ **Automatic Archive Format Detection**
          - **RAR Format**: Uses external \`rar\` command when available (better compression)
          - **ZIP Fallback**: Built-in ZIP support when RAR unavailable (no dependencies)
          - **Runtime Detection**: Automatically chooses best available format at startup
          
          ### ✅ **Robust Operation Modes**
          - **Production Mode**: Continuous monitoring with graceful error handling
          - **Test Mode**: Automated testing with 2-minute timeout for CI/CD pipelines
          - **Upload Throttling**: 120-second delays between uploads to prevent server overload
          
          ### ✅ **Enhanced Authentication & Security**
          - **Flexible Auth**: Works with or without credentials (handles empty username/password)
          - **HTTP Basic Auth**: Secure authentication when credentials provided
          - **Credential Detection**: Automatically detects and handles whitespace-only credentials
          
          ## 📦 Download Options
          
          ### Individual Binaries
          - **Linux (64-bit)**: \`astrocam-linux-amd64\`
          - **Windows (64-bit)**: \`astrocam-windows-amd64.exe\` (recommended for modern Windows)
          - **Windows (32-bit)**: \`astrocam-windows-386.exe\` (for legacy Windows systems)
          
          ### Complete Packages (Recommended)
          - **All platforms**: \`astrocam-${{ steps.version.outputs.version }}-complete.tar.gz\` or \`astrocam-${{ steps.version.outputs.version }}-complete.zip\`
          - Includes all binaries, configuration templates, and automated installation scripts
          - Ready-to-deploy with verbose installation feedback
          
          ## 🔧 Quick Start
          
          ### Linux Installation
          \`\`\`bash
          # Option 1: Complete package (recommended)
          wget https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/astrocam-${{ steps.version.outputs.version }}-complete.tar.gz
          tar -xzf astrocam-${{ steps.version.outputs.version }}-complete.tar.gz
          cd astrocam-${{ steps.version.outputs.version }}
          ./install-linux.sh
          
          # Option 2: Individual binary
          wget https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/astrocam-linux-amd64
          chmod +x astrocam-linux-amd64
          ./astrocam-linux-amd64 -version
          \`\`\`
          
          ### Windows Installation
          1. Download \`astrocam-${{ steps.version.outputs.version }}-complete.zip\`
          2. Extract to a folder
          3. Run \`install-windows.bat\` as Administrator
          4. Edit \`C:\\AstroCam\\config.env\` with your settings
          5. Run \`C:\\AstroCam\\astrocam.exe -test\` to verify
          
          ## ⚙️ Configuration
          
          ### Smart Config File Location
          AstroCam now automatically finds configuration files in this order:
          1. **Next to executable** (preferred for deployed installations)
          2. **Current working directory** (fallback for development)
          
          ### Setup Steps
          1. Copy \`config.env.example\` to \`config.env\`
          2. Edit server URL, credentials, and directories
          3. Ensure \`areas.txt\` contains your sky field prefixes
          4. Test with: \`./astrocam -test\`
          
          ### Example Configuration
          \`\`\`bash
          SAI_SERVER=https://your-server.com/upload.py
          SAI_USERNAME=your_username      # Optional: leave empty for no auth
          SAI_PASSWORD=your_password      # Optional: leave empty for no auth
          SAI_CAMERA_DIRECTORY=/path/to/camera/images
          SAI_PROCESSED_DIRECTORY=/path/to/processed/images
          SAI_INTERVAL=10                 # Scan interval in seconds
          SAI_COUNT=3                     # Files per archive
          \`\`\`
          
          ## 🔍 Archive Formats & Dependencies
          
          ### RAR (Preferred)
          - **Windows**: Install WinRAR (includes command line tools)
          - **Linux**: \`sudo apt install rar\` or \`sudo yum install rar\`
          - **Benefits**: Better compression, same format as original Python version
          
          ### ZIP (Universal Fallback)
          - **No Dependencies**: Built into Go executable
          - **Cross-Platform**: Works everywhere without additional software
          - **Automatic**: Used when \`rar\` command not detected
          
          ## ✅ Verification & Testing
          
          ### Verify Download Integrity
          \`\`\`bash
          # Download checksums file
          wget https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/checksums.txt
          
          # Verify binaries
          sha256sum -c checksums.txt
          \`\`\`
          
          ### Test Your Installation
          \`\`\`bash
          # Quick test (exits after 2 minutes if no files)
          ./astrocam -test
          
          # Show version
          ./astrocam -version
          
          # Normal operation
          ./astrocam
          \`\`\`
          
          ## 🔄 Migration from Python Version
          
          1. **Stop** the Python astrocam service
          2. **Backup** your current \`config.env\` and \`areas.txt\`
          3. **Install** Go version using complete package
          4. **Copy** your config files to installation directory
          5. **Test** with \`./astrocam -test\`
          6. **Deploy** and remove Python version
          
          The Go version is a **drop-in replacement** with improved reliability and performance.
          
          ## 🚨 Troubleshooting
          
          ### Common Issues
          - **"rar command not found"**: System automatically uses ZIP format
          - **HTTP 401/403 errors**: Check username/password in config.env
          - **File move errors**: System retries automatically, then continues
          - **Test timeout**: Normal behavior when no files present in test mode
          
          ### Getting Help
          - Check the complete README.md in the package
          - Review configuration examples
          - Run with \`-test\` flag for validation
          
          ---
          
          **Full Documentation**: [Repository README](https://github.com/${{ github.repository }}) | **Issues**: [Report Bugs](https://github.com/${{ github.repository }}/issues)
          EOF
          
          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          cat release_notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          release_name: AstroCam ${{ steps.version.outputs.version }}
          body: ${{ steps.release_notes.outputs.release_notes }}
          draft: false
          prerelease: false

      - name: Upload Linux binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./astrocam-linux-amd64
          asset_name: astrocam-linux-amd64
          asset_content_type: application/octet-stream

      - name: Upload Windows 64-bit binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./astrocam-windows-amd64.exe
          asset_name: astrocam-windows-amd64.exe
          asset_content_type: application/octet-stream

      - name: Upload Windows 32-bit binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./astrocam-windows-386.exe
          asset_name: astrocam-windows-386.exe
          asset_content_type: application/octet-stream

      - name: Upload checksums
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./checksums.txt
          asset_name: checksums.txt
          asset_content_type: text/plain

      - name: Upload complete package (tar.gz)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./astrocam-${{ steps.version.outputs.version }}-complete.tar.gz
          asset_name: astrocam-${{ steps.version.outputs.version }}-complete.tar.gz
          asset_content_type: application/gzip

      - name: Upload complete package (zip)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./astrocam-${{ steps.version.outputs.version }}-complete.zip
          asset_name: astrocam-${{ steps.version.outputs.version }}-complete.zip
          asset_content_type: application/zip
